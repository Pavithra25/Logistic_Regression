#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Oct 12 13:26:44 2019

@author: pavithra
"""
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("train_cleaned.csv")
data.head()

x = data.drop(["Survied"],axis=1)
y = data['Survived']
x.shape,y.shape

from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y = train_test_split(x,y, randomstate= '56')

from sklearn.preprocessing import MinMaxScaler
scaler= MinMaxScaler()

cols= train_x.columns
cols

train_x_scaled = scaler.fit_transform(train_x)
train_x_scaled = pd.DataFrame(train_x_scaled, columns=cols)
train_x_scaled.head()

test_x_scaled = scaler.transform(test_x)
test_x_scaled = pd.DataFrame(test_x_scaled, colummns=cols)
test_x_scaled.head()

from sklearn.linear_model import LogisticRegression as LogReg
from sklearn.metrics import f1_score

logreg=LogReg()
logreg.fit(train_x,train_y)

train_predict = logreg.predict(train_x)
train_predict

k=f1_score(train_predict, train_y)
print('Training f1_score',k)

test_predict = logreg.predict(test_x)
k = f1_score(test_predict, test_y)
print("Test f1_score",k)

train_preds = logreg.predict_proba(train_x)
train_preds

for i in range(0, len(train_preds)):
    if(train_preds[i]>0.55):
        train_preds[i]=1
    else:
        train_preds[i]=0

k = f1_score(train_preds, train_y)
print("Training f1_score",k)

from sklearn.metrics import confusion_matrix
cf = confusion_matrix(test_y, test_predict)
print(cf)

from sklearn.metrics import classification_report as rep
print(rep(test_y, test_predict))

